error_cost <- matrix(c(0, 1, 2, 0), nrow = 2)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(type ~ ., data = mushrooms_train, control=c50_options, rules=FALSE,
costs = error_cost)
mushrooms_test$pred_cost <- predict(mushrooms_cost, newdata = mushrooms_test)
mushrooms_test_pred_cost <- predict(mushrooms_cost, newdata = mushrooms_test)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(type ~ ., data = mushrooms_train, control=c50_options, rules=FALSE,
costs = error_cost)
# create a cost matrix
error_cost <- matrix(c(0, 1, 2, 0), nrow = 2)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
library(C50)     # C5.0을 사용하기 위한 라이브러리
library(gmodels) # CrossTable을 사용하기 위한 라이브러리
library(caret)   # UpSampling, DownSampling을 위한 라이브러리
setwd("D:/Workspace/R_Workspace/Data/chapter 5")
mushrooms <- read.csv("mushrooms.csv", stringsAsFactors = TRUE)
# 한가지 값만 있는 값 제거
mushrooms$veil_type <- NULL
# mushrooms data 분포 확인
table(mushrooms$type)
prop.table(table(mushrooms$type))
# 분리 방법 2
idx <- sample(2, nrow(mushrooms), replace = TRUE, prob = c(0.8, 0.2))
mushrooms_train <- mushrooms[idx == 1, ]
mushrooms_test <- mushrooms[idx == 2, ]
# Train 데이터를 통한  Decision tree model 생성
mushrooms_model <- C5.0(mushrooms_train[-1], mushrooms_train$type)
# Decision tree modeling 결과 확인
mushrooms_model           # display simple facts about the tree
summary(mushrooms_model)  # display detailed information about the tree
plot(mushrooms_model, type = "simple")
# Decision tree를 통한 Train data 결과 확인
mushrooms_train$pred <- predict(mushrooms_model, newdata = mushrooms_train)
# cross tabulation of predicted versus actual classes
CrossTable(mushrooms_train$type, mushrooms_train$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# Decision tree를 통한 Test data 결과 확인
mushrooms_test$pred <- predict(mushrooms_model, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_test$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 10)
mushrooms_boost10_pred <- predict(mushrooms_boost10, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# create a cost matrix
error_cost <- matrix(c(0, 1, 2, 0), nrow = 2)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
mushrooms_cost_pred <- predict(mushrooms_cost, newdata = mushrooms_test)
CrossTable(credit_test$default, credit_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
## Upsampling을 통한 데이터 공평하게 만들기
mushrooms_train_upsample<-upSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
names(mushrooms_train_upsample)[22] <-"type"
table(mushrooms_train_upsample$type)
table(mushrooms_train$type)
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
mushrooms_upsampling <- C5.0(mushrooms_train[-22], mushrooms_train_upsample$type)
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_upsampling_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
mushrooms_upsampling <- C5.0(mushrooms_train[-22], mushrooms_train_upsample$type)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-22], mushrooms_train_upsample$type)
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
mushrooms_train_upsample = cbind(mushrooms_train_upsample[22],mushrooms_train_upsample[-22])
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-22], mushrooms_train_upsample$type)
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
View(mushrooms_train_upsample)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-1], mushrooms_train_upsample$type)
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-1], mushrooms_train_upsample$type)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-1], mushrooms_train_upsample$type)
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_upsampling_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
# mushrooms data 분포 확인
table(mushrooms$type)
prop.table(table(mushrooms$type))
# train / test data 분포 확인
table(mushrooms_train$type)
table(mushrooms_test$type)
prop.table(table(mushrooms_train$type))
prop.table(table(mushrooms_test$type))
# Decision tree modeling 결과 확인
mushrooms_model           # display simple facts about the tree
plot(mushrooms_model, type = "simple")
summary(mushrooms_model)  # display detailed information about the tree
# Decision tree를 통한 Train data 결과 확인
mushrooms_train$pred <- predict(mushrooms_model, newdata = mushrooms_train)
# cross tabulation of predicted versus actual classes
CrossTable(mushrooms_train$type, mushrooms_train$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# Decision tree를 통한 Test data 결과 확인
mushrooms_test$pred <- predict(mushrooms_model, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_test$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
confusionMatrix(mushrooms_test$pred, mushrooms_test$type)
# Decision tree를 통한 Test data 결과 확인
mushrooms_test$pred <- predict(mushrooms_model, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_test$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
library(C50)     # C5.0을 사용하기 위한 라이브러리
library(gmodels) # CrossTable을 사용하기 위한 라이브러리
library(caret)   # UpSampling, DownSampling을 위한 라이브러리
setwd("D:/Workspace/R_Workspace/Data/chapter 5")
mushrooms <- read.csv("mushrooms.csv", stringsAsFactors = TRUE)
# 한가지 값만 있는 값 제거
mushrooms$veil_type <- NULL
prop.table(table(mushrooms$type))
# 분리 방법 2
idx <- sample(2, nrow(mushrooms), replace = TRUE, prob = c(0.8, 0.2))
mushrooms_train <- mushrooms[idx == 1, ]
mushrooms_test <- mushrooms[idx == 2, ]
prop.table(table(mushrooms_train$type))
prop.table(table(mushrooms_test$type))
# Train 데이터를 통한  Decision tree model 생성
mushrooms_model <- C5.0(mushrooms_train[-1], mushrooms_train$type)
# Decision tree를 통한 Train data 결과 확인
mushrooms_train$pred <- predict(mushrooms_model, newdata = mushrooms_train)
# cross tabulation of predicted versus actual classes
CrossTable(mushrooms_train$type, mushrooms_train$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# Decision tree를 통한 Test data 결과 확인
mushrooms_test$pred <- predict(mushrooms_model, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_test$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# 분리 방법 2
idx <- sample(2, nrow(mushrooms), replace = TRUE, prob = c(0.8, 0.2))
mushrooms_train <- mushrooms[idx == 1, ]
mushrooms_test <- mushrooms[idx == 2, ]
# 분리 방법 2
idx <- sample(2, nrow(mushrooms), replace = TRUE, prob = c(0.8, 0.2))
mushrooms_train <- mushrooms[idx == 1, ]
mushrooms_test <- mushrooms[idx == 2, ]
# 분리 방법 2
idx <- sample(2, nrow(mushrooms), replace = TRUE, prob = c(0.8, 0.2))
mushrooms_train <- mushrooms[idx == 1, ]
mushrooms_test <- mushrooms[idx == 2, ]
total_num = nrow(mushrooms)
mushrooms_rand <- mushrooms[order(runif(total_num)), ]
train_num = round(nrow(mushrooms) * 0.8)
mushrooms_train <- mushrooms_rand[1:train_num, ]
mushrooms_test  <- mushrooms_rand[(train_num+1):total_num, ]
# 분리 방법 2
idx <- sample(2, nrow(mushrooms), replace = FALSE, prob = c(0.8, 0.2))
# train / test data 분리 (8:2)
# 분리 방법 1
set.seed(7777)
total_num = nrow(mushrooms)
mushrooms_rand <- mushrooms[order(runif(total_num)), ]
train_num = round(nrow(mushrooms) * 0.8)
mushrooms_train <- mushrooms_rand[1:train_num, ]
mushrooms_test  <- mushrooms_rand[(train_num+1):total_num, ]
# 분리 방법 2
idx <- sample(2, nrow(mushrooms), replace = TRUE, prob = c(0.8, 0.2))
mushrooms_train <- mushrooms[idx == 1, ]
mushrooms_test <- mushrooms[idx == 2, ]
# train / test data 분리 (8:2)
# 분리 방법 1
set.seed(7777)
total_num = nrow(mushrooms)
mushrooms_rand <- mushrooms[order(runif(total_num)), ]
train_num = round(nrow(mushrooms) * 0.8)
mushrooms_train <- mushrooms_rand[1:train_num, ]
mushrooms_test  <- mushrooms_rand[(train_num+1):total_num, ]
total_num = nrow(mushrooms)
mushrooms_rand <- mushrooms[order(runif(total_num)), ]
train_num = round(nrow(mushrooms) * 0.8)
mushrooms_train <- mushrooms_rand[1:train_num, ]
mushrooms_test  <- mushrooms_rand[(train_num+1):total_num, ]
# Train 데이터를 통한  Decision tree model 생성
mushrooms_model <- C5.0(mushrooms_train[-1], mushrooms_train$type)
# Decision tree modeling 결과 확인
mushrooms_model           # display simple facts about the tree
# Decision tree를 통한 Train data 결과 확인
mushrooms_train$pred <- predict(mushrooms_model, newdata = mushrooms_train)
# cross tabulation of predicted versus actual classes
CrossTable(mushrooms_train$type, mushrooms_train$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# train / test data 분포 확인
table(mushrooms_train$type)
table(mushrooms_test$type)
# Decision tree를 통한 Test data 결과 확인
mushrooms_test$pred <- predict(mushrooms_model, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_test$pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 10)
mushrooms_boost10_pred <- predict(mushrooms_boost10, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 20)
mushrooms_boost10_pred <- predict(mushrooms_boost10, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 30)
mushrooms_boost10_pred <- predict(mushrooms_boost10, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 15)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 5)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 1)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 0)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 70)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 70)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 5)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 80)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 100)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
rm(mushrooms_boost10)
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 100)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 10)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 77)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 10)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# 방법 2 : 특정 Error에 Cost를 부과하는 방법
# create a cost matrix
error_cost <- matrix(c(0, 1, 2, 0), nrow = 2)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
# 방법 2 : 특정 Error에 Cost를 부과하는 방법
# create a cost matrix
matrix_dimensions <-list(c("edible", "poisonous"), c("edible", "poisonous"))
names(matrix_dimensions) <-c("predicted", "actual")
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
error_cost <- matrix(c(0, 1, 2, 0), nrow = 2, dimnames = matrix_dimensions)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
mushrooms_cost_pred <- predict(mushrooms_cost, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
## 방법 3 : Upsampling을 통한 데이터 공평하게 만들기
mushrooms_train_upsample<-upSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
names(mushrooms_train_upsample)[22] <-"type"
mushrooms_train_upsample = cbind(mushrooms_train_upsample[22],mushrooms_train_upsample[-22])
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
names(mushrooms_train_upsample)[22] <-"type"
mushrooms_train_upsample = cbind(mushrooms_train_upsample[22],mushrooms_train_upsample[-22])
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
## 방법 3 : Upsampling을 통한 데이터 공평하게 만들기
mushrooms_train_upsample<-upSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
names(mushrooms_train_upsample)[22] <-"type"
mushrooms_train_upsample = cbind(mushrooms_train_upsample[22],mushrooms_train_upsample[-22])
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
## 방법 3 : Upsampling을 통한 데이터 공평하게 만들기
mushrooms_train_upsample<-upSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
names(mushrooms_train_upsample)[22] <-"type"
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-1], mushrooms_train_upsample$type)
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
## 방법 3 : Up/Down sampling을 통한 데이터 공평하게 만들기
mushrooms_train_upsample<-downSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
names(mushrooms_train_upsample)[22] <-"type"
mushrooms_train_upsample = cbind(mushrooms_train_upsample[22],mushrooms_train_upsample[-22])
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
## 방법 3 : Up/Down sampling을 통한 데이터 공평하게 만들기
mushrooms_train_upsample<-downSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
View(mushrooms_train_upsample)
library(C50)     # C5.0을 사용하기 위한 라이브러리
library(gmodels) # CrossTable을 사용하기 위한 라이브러리
library(caret)   # UpSampling, DownSampling을 위한 라이브러리
setwd("D:/Workspace/R_Workspace/Data/chapter 5")
mushrooms <- read.csv("mushrooms.csv", stringsAsFactors = TRUE)
# 한가지 값만 있는 값 제거
mushrooms$veil_type <- NULL
# train / test data 분리 (8:2)
# 분리 방법 1
set.seed(7777)
total_num = nrow(mushrooms)
mushrooms_rand <- mushrooms[order(runif(total_num)), ]
train_num = round(nrow(mushrooms) * 0.8)
mushrooms_train <- mushrooms_rand[1:train_num, ]
mushrooms_test  <- mushrooms_rand[(train_num+1):total_num, ]
# Train 데이터를 통한  Decision tree model 생성
mushrooms_model <- C5.0(mushrooms_train[-1], mushrooms_train$type)
# Decision tree를 통한 Train data 결과 확인
mushrooms_train_pred <- predict(mushrooms_model, newdata = mushrooms_train)
# cross tabulation of predicted versus actual classes
CrossTable(mushrooms_train$type, mushrooms_train_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# Decision tree를 통한 Test data 결과 확인
mushrooms_test_pred <- predict(mushrooms_model, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_test_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# boosted decision tree with 10 trials
mushrooms_boost10 <- C5.0(mushrooms_train[-1], mushrooms_train$type,
trials = 10)
mushrooms_boost10_pred <- predict(mushrooms_boost10, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# 방법 2 : 특정 Error에 Cost를 부과하는 방법
# create a cost matrix
matrix_dimensions <-list(c("edible", "poisonous"), c("edible", "poisonous"))
names(matrix_dimensions) <-c("predicted", "actual")
error_cost <- matrix(c(0, 1, 2, 0), nrow = 2, dimnames = matrix_dimensions)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
mushrooms_cost
mushrooms_boost10
CrossTable(mushrooms_test$type, mushrooms_boost10_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
mushrooms_cost
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
mushrooms_cost
mushrooms_cost_pred <- predict(mushrooms_cost, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
# 방법 2 : 특정 Error에 Cost를 부과하는 방법
# create a cost matrix
matrix_dimensions <-list(c("edible", "poisonous"), c("edible", "poisonous"))
names(matrix_dimensions) <-c("predicted", "actual")
error_cost <- matrix(c(0, 2, 1, 0), nrow = 2, dimnames = matrix_dimensions)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
mushrooms_cost
mushrooms_cost_pred <- predict(mushrooms_cost, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
error_cost <- matrix(c(0, 4, 1, 0), nrow = 2, dimnames = matrix_dimensions)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
mushrooms_cost
mushrooms_cost_pred <- predict(mushrooms_cost, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
error_cost <- matrix(c(0, 1, 2, 0), nrow = 2, dimnames = matrix_dimensions)
# apply the cost matrix to the tree
mushrooms_cost <- C5.0(mushrooms_train[-1], mushrooms_train$type,
costs = error_cost)
mushrooms_cost
mushrooms_cost_pred <- predict(mushrooms_cost, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
## 방법 3 : Up/Down sampling을 통한 데이터 공평하게 만들기
mushrooms_train_upsample<-upSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
names(mushrooms_train_upsample)[22] <-"type"
mushrooms_train_upsample = cbind(mushrooms_train_upsample[22],mushrooms_train_upsample[-22])
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-1], mushrooms_train_upsample$type)
mushrooms_upsampling
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_upsampling_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
## 방법 3 : Up/Down sampling을 통한 데이터 공평하게 만들기
mushrooms_train_upsample<-downSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
names(mushrooms_train_upsample)[22] <-"type"
mushrooms_train_upsample = cbind(mushrooms_train_upsample[22],mushrooms_train_upsample[-22])
table(mushrooms_train_upsample$type)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-1], mushrooms_train_upsample$type)
mushrooms_upsampling
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_upsampling_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
## 방법 3 : Up/Down sampling을 통한 레이블된 데이터 비율 공평하게 만들기
mushrooms_train_upsample<-upSample(subset(mushrooms_train, select=-type),mushrooms_train$type)
names(mushrooms_train_upsample)[22] <-"type"
mushrooms_train_upsample = cbind(mushrooms_train_upsample[22],mushrooms_train_upsample[-22])
# 데이터 전후 비교
table(mushrooms_train$type)
table(mushrooms_train_upsample$type)
mushrooms_upsampling <- C5.0(mushrooms_train_upsample[-1], mushrooms_train_upsample$type)
mushrooms_upsampling
mushrooms_upsampling_pred <- predict(mushrooms_upsampling, newdata = mushrooms_test)
CrossTable(mushrooms_test$type, mushrooms_upsampling_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual type', 'predicted type'))
